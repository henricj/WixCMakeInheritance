name: Windows

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    strategy:
      #fail-fast: false
      matrix:
        config:
          - {
              name: Windows x64,
              platform: x64
            }
          - {
              name: Windows x86,
              platform: x86
            }
          - {
              name: Windows arm64,
              platform: arm64
            }

    env:
      NINJA_URL: https://github.com/ninja-build/ninja/releases/download/v1.10.0/ninja-win.zip
      NINJA_HASH: 919FD158C16BF135E8A850BB4046EC1CE28A7439EE08B977CD0B7F6B3463D178
      WIX314_URL: https://wixtoolset.org/downloads/v3.14.0.4118/wix314-binaries.zip
      WIX314_HASH: 34DCBBA9952902BFB710161BD45EE2E721FFA878DB99F738285A21C9B09C6EDB

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
      with:
        path: 'source'

    - name: Export Environment
      run: |
        function Export-WorkflowValue ([string]$name, [string]$value) {
          Write-Host ( '::set-env name={0}::{1}' -f $name, $value )
        }
        function New-NormalizedDirectory ([string]$name, [string]$path) {
          $value = (New-Item -Path $path -ItemType Directory -Force).FullName
          Export-WorkflowValue $name $value
          Return $value
        }
        $platform = '${{matrix.config.platform}}'
        $root = (Resolve-Path -LiteralPath $Env:GITHUB_WORKSPACE).Path
        $source = (Resolve-Path -LiteralPath (Join-Path $root -ChildPath 'source')).Path
        Export-WorkflowValue 'PROJECT_SOURCE' $source
        $build = New-NormalizedDirectory 'PROJECT_BUILD' (Join-Path $root -ChildPath ( 'build\Release-{0}' -f $platform ))
        Export-WorkflowValue 'PROJECT_TOOLS' (Join-Path $root -ChildPath 'tools')
        Export-WorkflowValue 'PROJECT_TOOLS_TMP' (Join-Path $root -ChildPath 'tools.tmp')
        $git_describe = git -C "$source" describe --tags --dirty --always
        $output_name = 'WixCMakeInheritance-{0}-{1}' -f $platform, $git_describe
        Export-WorkflowValue 'PROJECT_OUTPUT_NAME' $output_name
        Export-WorkflowValue 'PROJECT_MSI' (Join-Path $build -ChildPath ($output_name + '.msi'))
        Export-WorkflowValue 'PROJECT_INSTALLER' (Join-Path $build -ChildPath ($output_name + '.exe'))

    - name: Cache tools
      uses: actions/cache@v2
      id: cache
      with:
        path: tools
        key: ${{ env.NINJA_HASH }}-${{ env.WIX314_HASH }}

    - name: Setup tools
      shell: powershell # pwsh doesn't like following an HTTPS -> HTTP redirect
      run: |
        function Export-ToolPath ([string]$name, [Uri]$url, [string]$hash) {
          $path = Join-Path $Env:PROJECT_TOOLS -ChildPath $name
          if (-Not (Test-Path -path $path)) {
            Write-Host ( 'Fetching {0} from {1}' -f $name, $url )
            $tmpPath = (New-Item -Path $Env:PROJECT_TOOLS_TMP -ItemType Directory -Force).FullName
            $zipFile = Join-Path $tmpPath -ChildPath ($name + '.zip')
            Invoke-WebRequest -Uri $url -OutFile $zipFile > $null
            $actualHash = ((Get-FileHash $zipFile).Hash | Out-String).Trim()
            if( $actualHash -eq $hash) {
              $extractPath = Join-Path $tmpPath -ChildPath $name
              Expand-Archive -LiteralPath $zipFile -DestinationPath $extractPath -Force
              New-Item -Path $Env:PROJECT_TOOLS -ItemType Directory -Force > $null
              mv $extractPath $path > $null
              Write-Host ( 'Extracted {0} with hash {1} to {2}' -f $name, $actualHash, $path )
            } else {
              Write-Host ( '{0} file hash mismatch: {1}' -f $name, $actualHash )
              exit 1
            }
            rm $zipFile > $null
          }
          $path = (Resolve-Path -LiteralPath $path).Path
          Write-Host ( 'Adding path ' + $path )
          Write-Host ( '::add-path::' + $path )
        }
        $ProgressPreference = 'SilentlyContinue'
        Export-ToolPath 'ninja' $Env:NINJA_URL $Env:NINJA_HASH
        Export-ToolPath 'wix' $Env:WIX314_URL $Env:WIX314_HASH

    # Runs a set of commands using the runners shell
    - name: Compile and build
      shell: cmd
      run: |
        call "%PROJECT_SOURCE%\CallVsDevCmd.bat" -host_arch=x64 -arch=${{matrix.config.platform}} -startdir=none
        set CC=cl.exe
        set CXX=cl.exe
        cd "%PROJECT_BUILD%"
        cmake -G Ninja -v -DTARGET_PROCESSOR_NAME=${{matrix.config.platform}} -DTARGET_MSI_NAME=%PROJECT_OUTPUT_NAME% -DCMAKE_BUILD_TYPE="RelWithDebInfo" "%PROJECT_SOURCE%"
        cmake --build . -v
        cpack -G WIX -v
        cd "%PROJECT_SOURCE%"
        candle -arch ${{matrix.config.platform}} bundle.wxs -o "%PROJECT_BUILD%\bundle.wixobj" "-dTargetMsiPath=%PROJECT_MSI%" -ext WixBalExtension -ext WixUtilExtension
        candle -arch ${{matrix.config.platform}} vcredist.wxs -o "%PROJECT_BUILD%\vcredist.wixobj" -ext WixBalExtension -ext WixUtilExtension
        light "%PROJECT_BUILD%\bundle.wixobj" "%PROJECT_BUILD%\vcredist.wixobj" -ext WixBalExtension -ext WixUtilExtension -o "%PROJECT_INSTALLER%"

    - name: Upload Installer
      uses: actions/upload-artifact@v2
      with:
        name: Setup ${{env.PROJECT_OUTPUT_NAME}}
        path: ${{env.PROJECT_INSTALLER}}

    - name: Upload MSI
      uses: actions/upload-artifact@v2
      with:
        name: MSI ${{env.PROJECT_OUTPUT_NAME}}
        path: ${{env.PROJECT_MSI}}

    - name: Upload WIX Logs
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: wix-logs-${{ matrix.config.platform }}
        path: ${{ env.PROJECT_BUILD }}/**/*.log

    - name: Delete release tag
      run: git tag -d latest-${{matrix.config.platform}}${{matrix.config.name_postfix}}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: latest-${{matrix.config.platform}}${{matrix.config.name_postfix}}
        release_name: ${{env.PROJECT_OUTPUT_NAME}}
        draft: false
        prerelease: true

    - name: Upload Release MSI
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{env.PROJECT_MSI}}
        asset_name: ${{env.PROJECT_OUTPUT_NAME}}.msi

    - name: Upload Release EXE
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{env.PROJECT_INSTALLER}}
        asset_name: ${{env.PROJECT_OUTPUT_NAME}}.exe
